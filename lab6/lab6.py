# -*- coding: utf-8 -*-
"""lab6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iNJRQyfXY-UVcPmaQBibUlZHVcwGjV0w
"""

import numpy as np

np.set_printoptions(suppress=True)

# Angles in radians
theta_1 = 90 * np.pi / 180
theta_2 = -45 * np.pi / 180
theta_3 = 0
theta_4 = 45 * np.pi / 180

# Skew-symmetric matrices
a1 = 0
a2 = 0
a3 = 1
z_hat_bracket = np.array([[0, -a3, a2], [a3, 0, -a1], [-a2, a1, 0]])
a1 = 0
a2 = 1
a3 = 0
y_hat_bracket = np.array([[0, -a3, a2], [a3, 0, -a1], [-a2, a1, 0]])

# Calculate the rotation matrices using Rodrigue's formula
e_z_hat_bracket_theta_1 = np.eye(3) + np.sin(theta_1) * z_hat_bracket + (1 - np.cos(theta_1)) * np.matmul(z_hat_bracket, z_hat_bracket)
e_y_hat_bracket_theta_2 = np.eye(3) + np.sin(theta_2) * y_hat_bracket + (1 - np.cos(theta_2)) * np.matmul(y_hat_bracket, y_hat_bracket)
e_y_hat_bracket_theta_3 = np.eye(3) + np.sin(theta_3) * y_hat_bracket + (1 - np.cos(theta_3)) * np.matmul(y_hat_bracket, y_hat_bracket)
e_y_hat_bracket_theta_4 = np.eye(3) + np.sin(theta_4) * y_hat_bracket + (1 - np.cos(theta_4)) * np.matmul(y_hat_bracket, y_hat_bracket)

# Calculate the final rotation matrix product of exponentials
R = np.matmul(np.matmul(np.matmul(np.matmul(np.eye(3), e_z_hat_bracket_theta_1), e_y_hat_bracket_theta_2), e_y_hat_bracket_theta_3), e_y_hat_bracket_theta_4)

# Print the final rotation matrix
print(R)

# Question: Is this familiar to you?